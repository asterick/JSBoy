define([], function() {
    var IMPLIED = 0;
    var WORD = 1;
    var BYTE = 2;
    var SIGNED = 3;
    var RELATIVE_PC = 4;

    var BASE_INSTRUCTION_SET = [
        { format:           'NOP', arg:IMPLIED },
        { format:      'LD BC,$%', arg:WORD },
        { format:     'LD (BC),A', arg:IMPLIED },
        { format:        'INC BC', arg:IMPLIED },
        { format:         'INC B', arg:IMPLIED },
        { format:         'DEC B', arg:IMPLIED },
        { format:       'LD B,$%', arg:BYTE },
        { format:          'RLCA', arg:IMPLIED },
        { format:    'LD ($%),SP', arg:WORD },
        { format:     'ADD HL,BC', arg:IMPLIED },
        { format:     'LD A,(BC)', arg:IMPLIED },
        { format:        'DEC BC', arg:IMPLIED },
        { format:         'INC C', arg:IMPLIED },
        { format:         'DEC C', arg:IMPLIED },
        { format:       'LD C,$%', arg:BYTE },
        { format:          'RRCA', arg:IMPLIED },
        { format:          'STOP', arg:IMPLIED },
        { format:      'LD DE,$%', arg:WORD },
        { format:     'LD (DE),A', arg:IMPLIED },
        { format:        'INC DE', arg:IMPLIED },
        { format:         'INC D', arg:IMPLIED },
        { format:         'DEC D', arg:IMPLIED },
        { format:       'LD D,$%', arg:BYTE },
        { format:           'RLA', arg:IMPLIED },
        { format:         'JR $%', arg:RELATIVE_PC },
        { format:     'ADD HL,DE', arg:IMPLIED },
        { format:     'LD A,(DE)', arg:IMPLIED },
        { format:        'DEC DE', arg:IMPLIED },
        { format:         'INC E', arg:IMPLIED },
        { format:         'DEC E', arg:IMPLIED },
        { format:       'LD E,$%', arg:BYTE },
        { format:           'RRA', arg:IMPLIED },
        { format:      'JR NZ,$%', arg:RELATIVE_PC },
        { format:      'LD HL,$%', arg:WORD },
        { format:    'LDI (HL),A', arg:IMPLIED },
        { format:        'INC HL', arg:IMPLIED },
        { format:         'INC H', arg:IMPLIED },
        { format:         'DEC H', arg:IMPLIED },
        { format:       'LD H,$%', arg:BYTE },
        { format:           'DAA', arg:IMPLIED },
        { format:       'JR Z,$%', arg:RELATIVE_PC },
        { format:     'ADD HL,HL', arg:IMPLIED },
        { format:    'LDI A,(HL)', arg:IMPLIED },
        { format:        'DEC HL', arg:IMPLIED },
        { format:         'INC L', arg:IMPLIED },
        { format:         'DEC L', arg:IMPLIED },
        { format:       'LD L,$%', arg:BYTE },
        { format:           'CPL', arg:IMPLIED },
        { format:      'JR NC,$%', arg:RELATIVE_PC },
        { format:      'LD SP,$%', arg:WORD },
        { format:    'LDD (HL),A', arg:IMPLIED },
        { format:        'INC SP', arg:IMPLIED },
        { format:      'INC (HL)', arg:IMPLIED },
        { format:      'DEC (HL)', arg:IMPLIED },
        { format:    'LD (HL),$%', arg:BYTE },
        { format:           'SCF', arg:IMPLIED },
        { format:       'JR C,$%', arg:RELATIVE_PC },
        { format:     'ADD HL,SP', arg:IMPLIED },
        { format:    'LDD A,(HL)', arg:IMPLIED },
        { format:        'DEC SP', arg:IMPLIED },
        { format:         'INC A', arg:IMPLIED },
        { format:         'DEC A', arg:IMPLIED },
        { format:       'LD A,$%', arg:BYTE },
        { format:           'CCF', arg:IMPLIED },
        { format:        'LD B,B', arg:IMPLIED },
        { format:        'LD B,C', arg:IMPLIED },
        { format:        'LD B,D', arg:IMPLIED },
        { format:        'LD B,E', arg:IMPLIED },
        { format:        'LD B,H', arg:IMPLIED },
        { format:        'LD B,L', arg:IMPLIED },
        { format:     'LD B,(HL)', arg:IMPLIED },
        { format:        'LD B,A', arg:IMPLIED },
        { format:        'LD C,B', arg:IMPLIED },
        { format:        'LD C,C', arg:IMPLIED },
        { format:        'LD C,D', arg:IMPLIED },
        { format:        'LD C,E', arg:IMPLIED },
        { format:        'LD C,H', arg:IMPLIED },
        { format:        'LD C,L', arg:IMPLIED },
        { format:     'LD C,(HL)', arg:IMPLIED },
        { format:        'LD C,A', arg:IMPLIED },
        { format:        'LD D,B', arg:IMPLIED },
        { format:        'LD D,C', arg:IMPLIED },
        { format:        'LD D,D', arg:IMPLIED },
        { format:        'LD D,E', arg:IMPLIED },
        { format:        'LD D,H', arg:IMPLIED },
        { format:        'LD D,L', arg:IMPLIED },
        { format:     'LD D,(HL)', arg:IMPLIED },
        { format:        'LD D,A', arg:IMPLIED },
        { format:        'LD E,B', arg:IMPLIED },
        { format:        'LD E,C', arg:IMPLIED },
        { format:        'LD E,D', arg:IMPLIED },
        { format:        'LD E,E', arg:IMPLIED },
        { format:        'LD E,H', arg:IMPLIED },
        { format:        'LD E,L', arg:IMPLIED },
        { format:     'LD E,(HL)', arg:IMPLIED },
        { format:        'LD E,A', arg:IMPLIED },
        { format:        'LD H,B', arg:IMPLIED },
        { format:        'LD H,C', arg:IMPLIED },
        { format:        'LD H,D', arg:IMPLIED },
        { format:        'LD H,E', arg:IMPLIED },
        { format:        'LD H,H', arg:IMPLIED },
        { format:        'LD H,L', arg:IMPLIED },
        { format:     'LD H,(HL)', arg:IMPLIED },
        { format:        'LD H,A', arg:IMPLIED },
        { format:        'LD L,B', arg:IMPLIED },
        { format:        'LD L,C', arg:IMPLIED },
        { format:        'LD L,D', arg:IMPLIED },
        { format:        'LD L,E', arg:IMPLIED },
        { format:        'LD L,H', arg:IMPLIED },
        { format:        'LD L,L', arg:IMPLIED },
        { format:     'LD L,(HL)', arg:IMPLIED },
        { format:        'LD L,A', arg:IMPLIED },
        { format:     'LD (HL),B', arg:IMPLIED },
        { format:     'LD (HL),C', arg:IMPLIED },
        { format:     'LD (HL),D', arg:IMPLIED },
        { format:     'LD (HL),E', arg:IMPLIED },
        { format:     'LD (HL),H', arg:IMPLIED },
        { format:     'LD (HL),L', arg:IMPLIED },
        { format:          'HALT', arg:IMPLIED },
        { format:     'LD (HL),A', arg:IMPLIED },
        { format:        'LD A,B', arg:IMPLIED },
        { format:        'LD A,C', arg:IMPLIED },
        { format:        'LD A,D', arg:IMPLIED },
        { format:        'LD A,E', arg:IMPLIED },
        { format:        'LD A,H', arg:IMPLIED },
        { format:        'LD A,L', arg:IMPLIED },
        { format:     'LD A,(HL)', arg:IMPLIED },
        { format:        'LD A,A', arg:IMPLIED },
        { format:       'ADD A,B', arg:IMPLIED },
        { format:       'ADD A,C', arg:IMPLIED },
        { format:       'ADD A,D', arg:IMPLIED },
        { format:       'ADD A,E', arg:IMPLIED },
        { format:       'ADD A,H', arg:IMPLIED },
        { format:       'ADD A,L', arg:IMPLIED },
        { format:    'ADD A,(HL)', arg:IMPLIED },
        { format:       'ADD A,A', arg:IMPLIED },
        { format:       'ADC A,B', arg:IMPLIED },
        { format:       'ADC A,C', arg:IMPLIED },
        { format:       'ADC A,D', arg:IMPLIED },
        { format:       'ADC A,E', arg:IMPLIED },
        { format:       'ADC A,H', arg:IMPLIED },
        { format:       'ADC A,L', arg:IMPLIED },
        { format:    'ADC A,(HL)', arg:IMPLIED },
        { format:       'ADC A,A', arg:IMPLIED },
        { format:         'SUB B', arg:IMPLIED },
        { format:         'SUB C', arg:IMPLIED },
        { format:         'SUB D', arg:IMPLIED },
        { format:         'SUB E', arg:IMPLIED },
        { format:         'SUB H', arg:IMPLIED },
        { format:         'SUB L', arg:IMPLIED },
        { format:      'SUB (HL)', arg:IMPLIED },
        { format:         'SUB A', arg:IMPLIED },
        { format:       'SBC A,B', arg:IMPLIED },
        { format:       'SBC A,C', arg:IMPLIED },
        { format:       'SBC A,D', arg:IMPLIED },
        { format:       'SBC A,E', arg:IMPLIED },
        { format:       'SBC A,H', arg:IMPLIED },
        { format:       'SBC A,L', arg:IMPLIED },
        { format:    'SBC A,(HL)', arg:IMPLIED },
        { format:       'SBC A,A', arg:IMPLIED },
        { format:         'AND B', arg:IMPLIED },
        { format:         'AND C', arg:IMPLIED },
        { format:         'AND D', arg:IMPLIED },
        { format:         'AND E', arg:IMPLIED },
        { format:         'AND H', arg:IMPLIED },
        { format:         'AND L', arg:IMPLIED },
        { format:      'AND (HL)', arg:IMPLIED },
        { format:         'AND A', arg:IMPLIED },
        { format:         'XOR B', arg:IMPLIED },
        { format:         'XOR C', arg:IMPLIED },
        { format:         'XOR D', arg:IMPLIED },
        { format:         'XOR E', arg:IMPLIED },
        { format:         'XOR H', arg:IMPLIED },
        { format:         'XOR L', arg:IMPLIED },
        { format:      'XOR (HL)', arg:IMPLIED },
        { format:         'XOR A', arg:IMPLIED },
        { format:          'OR B', arg:IMPLIED },
        { format:          'OR C', arg:IMPLIED },
        { format:          'OR D', arg:IMPLIED },
        { format:          'OR E', arg:IMPLIED },
        { format:          'OR H', arg:IMPLIED },
        { format:          'OR L', arg:IMPLIED },
        { format:       'OR (HL)', arg:IMPLIED },
        { format:          'OR A', arg:IMPLIED },
        { format:          'CP B', arg:IMPLIED },
        { format:          'CP C', arg:IMPLIED },
        { format:          'CP D', arg:IMPLIED },
        { format:          'CP E', arg:IMPLIED },
        { format:          'CP H', arg:IMPLIED },
        { format:          'CP L', arg:IMPLIED },
        { format:       'CP (HL)', arg:IMPLIED },
        { format:          'CP A', arg:IMPLIED },
        { format:        'RET NZ', arg:IMPLIED },
        { format:        'POP BC', arg:IMPLIED },
        { format:      'JP NZ,$%', arg:WORD },
        { format:         'JP $%', arg:WORD },
        { format:    'CALL NZ,$%', arg:WORD },
        { format:       'PUSH BC', arg:IMPLIED },
        { format:      'ADD A,$%', arg:BYTE },
        { format:       'RST $00', arg:IMPLIED },
        { format:         'RET Z', arg:IMPLIED },
        { format:           'RET', arg:IMPLIED },
        { format:       'JP Z,$%', arg:WORD },
        null,
        { format:     'CALL Z,$%', arg:WORD },
        { format:       'CALL $%', arg:WORD },
        { format:      'ADC A,$%', arg:BYTE },
        { format:       'RST $08', arg:IMPLIED },
        { format:        'RET NC', arg:IMPLIED },
        { format:        'POP DE', arg:IMPLIED },
        { format:      'JP NC,$%', arg:WORD },
        null,
        { format:    'CALL NC,$%', arg:WORD },
        { format:       'PUSH DE', arg:IMPLIED },
        { format:        'SUB $%', arg:BYTE },
        { format:       'RST $10', arg:IMPLIED },
        { format:         'RET C', arg:IMPLIED },
        { format:          'RETI', arg:IMPLIED },
        { format:       'JP C,$%', arg:WORD },
        null,
        { format:     'CALL C,$%', arg:WORD },
        null,
        { format:      'SBC A,$%', arg:BYTE },
        { format:       'RST $18', arg:IMPLIED },
        { format:     'LDH ($%),A', arg:BYTE },
        { format:        'POP HL', arg:IMPLIED },
        { format:      'LDH (C),A', arg:IMPLIED },
        null,
        null,
        { format:       'PUSH HL', arg:IMPLIED },
        { format:        'AND $%', arg:BYTE },
        { format:       'RST $20', arg:IMPLIED },
        { format:     'ADD SP,$%', arg:SIGNED },
        { format:         'JP HL', arg:IMPLIED },
        { format:     'LD ($%),A', arg:WORD },
        null,
        null,
        null,
        { format:        'XOR $%', arg:BYTE },
        { format:       'RST $28', arg:IMPLIED },
        { format:     'LDH A,($%)', arg:BYTE },
        { format:        'POP AF', arg:IMPLIED },
        { format:      'LDH A,(C)', arg:IMPLIED },
        { format:            'DI', arg:IMPLIED },
        null,
        { format:       'PUSH AF', arg:IMPLIED },
        { format:         'OR $%', arg:BYTE },
        { format:       'RST $30', arg:IMPLIED },
        { format:      'LD HL,SP', arg:IMPLIED },
        { format:      'LD SP,HL', arg:IMPLIED },
        { format:     'LD A,($%)', arg:WORD },
        { format:            'EI', arg:IMPLIED },
        null,
        null,
        { format:         'CP $%', arg:BYTE },
        { format:       'RST $38', arg:IMPLIED },
    ];

    var EXTENDED_INSTRUCTION_SET = [
        { format:       'RLC B', arg:IMPLIED },
        { format:       'RLC C', arg:IMPLIED },
        { format:       'RLC D', arg:IMPLIED },
        { format:       'RLC E', arg:IMPLIED },
        { format:       'RLC H', arg:IMPLIED },
        { format:       'RLC L', arg:IMPLIED },
        { format:    'RLC (HL)', arg:IMPLIED },
        { format:       'RLC A', arg:IMPLIED },
        { format:       'RRC B', arg:IMPLIED },
        { format:       'RRC C', arg:IMPLIED },
        { format:       'RRC D', arg:IMPLIED },
        { format:       'RRC E', arg:IMPLIED },
        { format:       'RRC H', arg:IMPLIED },
        { format:       'RRC L', arg:IMPLIED },
        { format:    'RRC (HL)', arg:IMPLIED },
        { format:       'RRC A', arg:IMPLIED },
        { format:        'RL B', arg:IMPLIED },
        { format:        'RL C', arg:IMPLIED },
        { format:        'RL D', arg:IMPLIED },
        { format:        'RL E', arg:IMPLIED },
        { format:        'RL H', arg:IMPLIED },
        { format:        'RL L', arg:IMPLIED },
        { format:     'RL (HL)', arg:IMPLIED },
        { format:        'RL A', arg:IMPLIED },
        { format:        'RR B', arg:IMPLIED },
        { format:        'RR C', arg:IMPLIED },
        { format:        'RR D', arg:IMPLIED },
        { format:        'RR E', arg:IMPLIED },
        { format:        'RR H', arg:IMPLIED },
        { format:        'RR L', arg:IMPLIED },
        { format:     'RR (HL)', arg:IMPLIED },
        { format:        'RR A', arg:IMPLIED },
        { format:       'SLA B', arg:IMPLIED },
        { format:       'SLA C', arg:IMPLIED },
        { format:       'SLA D', arg:IMPLIED },
        { format:       'SLA E', arg:IMPLIED },
        { format:       'SLA H', arg:IMPLIED },
        { format:       'SLA L', arg:IMPLIED },
        { format:    'SLA (HL)', arg:IMPLIED },
        { format:       'SLA A', arg:IMPLIED },
        { format:       'SRA B', arg:IMPLIED },
        { format:       'SRA C', arg:IMPLIED },
        { format:       'SRA D', arg:IMPLIED },
        { format:       'SRA E', arg:IMPLIED },
        { format:       'SRA H', arg:IMPLIED },
        { format:       'SRA L', arg:IMPLIED },
        { format:    'SRA (HL)', arg:IMPLIED },
        { format:       'SRA A', arg:IMPLIED },
        { format:      'SWAP B', arg:IMPLIED },
        { format:      'SWAP C', arg:IMPLIED },
        { format:      'SWAP D', arg:IMPLIED },
        { format:      'SWAP E', arg:IMPLIED },
        { format:      'SWAP H', arg:IMPLIED },
        { format:      'SWAP L', arg:IMPLIED },
        { format:   'SWAP (HL)', arg:IMPLIED },
        { format:      'SWAP A', arg:IMPLIED },
        { format:       'SRL B', arg:IMPLIED },
        { format:       'SRL C', arg:IMPLIED },
        { format:       'SRL D', arg:IMPLIED },
        { format:       'SRL E', arg:IMPLIED },
        { format:       'SRL H', arg:IMPLIED },
        { format:       'SRL L', arg:IMPLIED },
        { format:    'SRL (HL)', arg:IMPLIED },
        { format:       'SRL A', arg:IMPLIED },
        { format:    'BIT 0, B', arg:IMPLIED },
        { format:    'BIT 0, C', arg:IMPLIED },
        { format:    'BIT 0, D', arg:IMPLIED },
        { format:    'BIT 0, E', arg:IMPLIED },
        { format:    'BIT 0, H', arg:IMPLIED },
        { format:    'BIT 0, L', arg:IMPLIED },
        { format: 'BIT 0, (HL)', arg:IMPLIED },
        { format:    'BIT 0, A', arg:IMPLIED },
        { format:    'BIT 1, B', arg:IMPLIED },
        { format:    'BIT 1, C', arg:IMPLIED },
        { format:    'BIT 1, D', arg:IMPLIED },
        { format:    'BIT 1, E', arg:IMPLIED },
        { format:    'BIT 1, H', arg:IMPLIED },
        { format:    'BIT 1, L', arg:IMPLIED },
        { format: 'BIT 1, (HL)', arg:IMPLIED },
        { format:    'BIT 1, A', arg:IMPLIED },
        { format:    'BIT 2, B', arg:IMPLIED },
        { format:    'BIT 2, C', arg:IMPLIED },
        { format:    'BIT 2, D', arg:IMPLIED },
        { format:    'BIT 2, E', arg:IMPLIED },
        { format:    'BIT 2, H', arg:IMPLIED },
        { format:    'BIT 2, L', arg:IMPLIED },
        { format: 'BIT 2, (HL)', arg:IMPLIED },
        { format:    'BIT 2, A', arg:IMPLIED },
        { format:    'BIT 3, B', arg:IMPLIED },
        { format:    'BIT 3, C', arg:IMPLIED },
        { format:    'BIT 3, D', arg:IMPLIED },
        { format:    'BIT 3, E', arg:IMPLIED },
        { format:    'BIT 3, H', arg:IMPLIED },
        { format:    'BIT 3, L', arg:IMPLIED },
        { format: 'BIT 3, (HL)', arg:IMPLIED },
        { format:    'BIT 3, A', arg:IMPLIED },
        { format:    'BIT 4, B', arg:IMPLIED },
        { format:    'BIT 4, C', arg:IMPLIED },
        { format:    'BIT 4, D', arg:IMPLIED },
        { format:    'BIT 4, E', arg:IMPLIED },
        { format:    'BIT 4, H', arg:IMPLIED },
        { format:    'BIT 4, L', arg:IMPLIED },
        { format: 'BIT 4, (HL)', arg:IMPLIED },
        { format:    'BIT 4, A', arg:IMPLIED },
        { format:    'BIT 5, B', arg:IMPLIED },
        { format:    'BIT 5, C', arg:IMPLIED },
        { format:    'BIT 5, D', arg:IMPLIED },
        { format:    'BIT 5, E', arg:IMPLIED },
        { format:    'BIT 5, H', arg:IMPLIED },
        { format:    'BIT 5, L', arg:IMPLIED },
        { format: 'BIT 5, (HL)', arg:IMPLIED },
        { format:    'BIT 5, A', arg:IMPLIED },
        { format:    'BIT 6, B', arg:IMPLIED },
        { format:    'BIT 6, C', arg:IMPLIED },
        { format:    'BIT 6, D', arg:IMPLIED },
        { format:    'BIT 6, E', arg:IMPLIED },
        { format:    'BIT 6, H', arg:IMPLIED },
        { format:    'BIT 6, L', arg:IMPLIED },
        { format: 'BIT 6, (HL)', arg:IMPLIED },
        { format:    'BIT 6, A', arg:IMPLIED },
        { format:    'BIT 7, B', arg:IMPLIED },
        { format:    'BIT 7, C', arg:IMPLIED },
        { format:    'BIT 7, D', arg:IMPLIED },
        { format:    'BIT 7, E', arg:IMPLIED },
        { format:    'BIT 7, H', arg:IMPLIED },
        { format:    'BIT 7, L', arg:IMPLIED },
        { format: 'BIT 7, (HL)', arg:IMPLIED },
        { format:    'BIT 7, A', arg:IMPLIED },
        { format:    'RES 0, B', arg:IMPLIED },
        { format:    'RES 0, C', arg:IMPLIED },
        { format:    'RES 0, D', arg:IMPLIED },
        { format:    'RES 0, E', arg:IMPLIED },
        { format:    'RES 0, H', arg:IMPLIED },
        { format:    'RES 0, L', arg:IMPLIED },
        { format: 'RES 0, (HL)', arg:IMPLIED },
        { format:    'RES 0, A', arg:IMPLIED },
        { format:    'RES 1, B', arg:IMPLIED },
        { format:    'RES 1, C', arg:IMPLIED },
        { format:    'RES 1, D', arg:IMPLIED },
        { format:    'RES 1, E', arg:IMPLIED },
        { format:    'RES 1, H', arg:IMPLIED },
        { format:    'RES 1, L', arg:IMPLIED },
        { format: 'RES 1, (HL)', arg:IMPLIED },
        { format:    'RES 1, A', arg:IMPLIED },
        { format:    'RES 2, B', arg:IMPLIED },
        { format:    'RES 2, C', arg:IMPLIED },
        { format:    'RES 2, D', arg:IMPLIED },
        { format:    'RES 2, E', arg:IMPLIED },
        { format:    'RES 2, H', arg:IMPLIED },
        { format:    'RES 2, L', arg:IMPLIED },
        { format: 'RES 2, (HL)', arg:IMPLIED },
        { format:    'RES 2, A', arg:IMPLIED },
        { format:    'RES 3, B', arg:IMPLIED },
        { format:    'RES 3, C', arg:IMPLIED },
        { format:    'RES 3, D', arg:IMPLIED },
        { format:    'RES 3, E', arg:IMPLIED },
        { format:    'RES 3, H', arg:IMPLIED },
        { format:    'RES 3, L', arg:IMPLIED },
        { format: 'RES 3, (HL)', arg:IMPLIED },
        { format:    'RES 3, A', arg:IMPLIED },
        { format:    'RES 4, B', arg:IMPLIED },
        { format:    'RES 4, C', arg:IMPLIED },
        { format:    'RES 4, D', arg:IMPLIED },
        { format:    'RES 4, E', arg:IMPLIED },
        { format:    'RES 4, H', arg:IMPLIED },
        { format:    'RES 4, L', arg:IMPLIED },
        { format: 'RES 4, (HL)', arg:IMPLIED },
        { format:    'RES 4, A', arg:IMPLIED },
        { format:    'RES 5, B', arg:IMPLIED },
        { format:    'RES 5, C', arg:IMPLIED },
        { format:    'RES 5, D', arg:IMPLIED },
        { format:    'RES 5, E', arg:IMPLIED },
        { format:    'RES 5, H', arg:IMPLIED },
        { format:    'RES 5, L', arg:IMPLIED },
        { format: 'RES 5, (HL)', arg:IMPLIED },
        { format:    'RES 5, A', arg:IMPLIED },
        { format:    'RES 6, B', arg:IMPLIED },
        { format:    'RES 6, C', arg:IMPLIED },
        { format:    'RES 6, D', arg:IMPLIED },
        { format:    'RES 6, E', arg:IMPLIED },
        { format:    'RES 6, H', arg:IMPLIED },
        { format:    'RES 6, L', arg:IMPLIED },
        { format: 'RES 6, (HL)', arg:IMPLIED },
        { format:    'RES 6, A', arg:IMPLIED },
        { format:    'RES 7, B', arg:IMPLIED },
        { format:    'RES 7, C', arg:IMPLIED },
        { format:    'RES 7, D', arg:IMPLIED },
        { format:    'RES 7, E', arg:IMPLIED },
        { format:    'RES 7, H', arg:IMPLIED },
        { format:    'RES 7, L', arg:IMPLIED },
        { format: 'RES 7, (HL)', arg:IMPLIED },
        { format:    'RES 7, A', arg:IMPLIED },
        { format:    'SET 0, B', arg:IMPLIED },
        { format:    'SET 0, C', arg:IMPLIED },
        { format:    'SET 0, D', arg:IMPLIED },
        { format:    'SET 0, E', arg:IMPLIED },
        { format:    'SET 0, H', arg:IMPLIED },
        { format:    'SET 0, L', arg:IMPLIED },
        { format: 'SET 0, (HL)', arg:IMPLIED },
        { format:    'SET 0, A', arg:IMPLIED },
        { format:    'SET 1, B', arg:IMPLIED },
        { format:    'SET 1, C', arg:IMPLIED },
        { format:    'SET 1, D', arg:IMPLIED },
        { format:    'SET 1, E', arg:IMPLIED },
        { format:    'SET 1, H', arg:IMPLIED },
        { format:    'SET 1, L', arg:IMPLIED },
        { format: 'SET 1, (HL)', arg:IMPLIED },
        { format:    'SET 1, A', arg:IMPLIED },
        { format:    'SET 2, B', arg:IMPLIED },
        { format:    'SET 2, C', arg:IMPLIED },
        { format:    'SET 2, D', arg:IMPLIED },
        { format:    'SET 2, E', arg:IMPLIED },
        { format:    'SET 2, H', arg:IMPLIED },
        { format:    'SET 2, L', arg:IMPLIED },
        { format: 'SET 2, (HL)', arg:IMPLIED },
        { format:    'SET 2, A', arg:IMPLIED },
        { format:    'SET 3, B', arg:IMPLIED },
        { format:    'SET 3, C', arg:IMPLIED },
        { format:    'SET 3, D', arg:IMPLIED },
        { format:    'SET 3, E', arg:IMPLIED },
        { format:    'SET 3, H', arg:IMPLIED },
        { format:    'SET 3, L', arg:IMPLIED },
        { format: 'SET 3, (HL)', arg:IMPLIED },
        { format:    'SET 3, A', arg:IMPLIED },
        { format:    'SET 4, B', arg:IMPLIED },
        { format:    'SET 4, C', arg:IMPLIED },
        { format:    'SET 4, D', arg:IMPLIED },
        { format:    'SET 4, E', arg:IMPLIED },
        { format:    'SET 4, H', arg:IMPLIED },
        { format:    'SET 4, L', arg:IMPLIED },
        { format: 'SET 4, (HL)', arg:IMPLIED },
        { format:    'SET 4, A', arg:IMPLIED },
        { format:    'SET 5, B', arg:IMPLIED },
        { format:    'SET 5, C', arg:IMPLIED },
        { format:    'SET 5, D', arg:IMPLIED },
        { format:    'SET 5, E', arg:IMPLIED },
        { format:    'SET 5, H', arg:IMPLIED },
        { format:    'SET 5, L', arg:IMPLIED },
        { format: 'SET 5, (HL)', arg:IMPLIED },
        { format:    'SET 5, A', arg:IMPLIED },
        { format:    'SET 6, B', arg:IMPLIED },
        { format:    'SET 6, C', arg:IMPLIED },
        { format:    'SET 6, D', arg:IMPLIED },
        { format:    'SET 6, E', arg:IMPLIED },
        { format:    'SET 6, H', arg:IMPLIED },
        { format:    'SET 6, L', arg:IMPLIED },
        { format: 'SET 6, (HL)', arg:IMPLIED },
        { format:    'SET 6, A', arg:IMPLIED },
        { format:    'SET 7, B', arg:IMPLIED },
        { format:    'SET 7, C', arg:IMPLIED },
        { format:    'SET 7, D', arg:IMPLIED },
        { format:    'SET 7, E', arg:IMPLIED },
        { format:    'SET 7, H', arg:IMPLIED },
        { format:    'SET 7, L', arg:IMPLIED },
        { format: 'SET 7, (HL)', arg:IMPLIED },
        { format:    'SET 7, A', arg:IMPLIED }
    ];

    function disassembler(cpu)
    {
        this.cpu = cpu;
    }

    disassembler.prototype.disassemble = function(pc)
    {
        function hex(v, p)
        {
            var o = v.toString(16);
        
            while( o.length < p )
                o = "0"+o;
            return o;
        }

        var template;

        var op = this.cpu.read[pc]();
        pc = (pc+1) & 0xFFFF;
    
        var bytes = hex(op,2);
    
    
        if( op == 0xCB )
        {
            op = this.cpu.read[pc]();
            pc = (pc+1) & 0xFFFF;
            bytes += " " + hex(op,2);
            template = EXTENDED_INSTRUCTION_SET[op];
        }
        else
        {
            template = BASE_INSTRUCTION_SET[op]
        }
    
        if( !template )
            return null;
    
        switch( template.arg )
        {
            case WORD:
                var b = this.cpu.read[pc]();
                pc = (pc+1) & 0xFFFF;
                var a = this.cpu.read[pc]();
                pc = (pc+1) & 0xFFFF;
                bytes += " " + hex(b,2) + " " + hex(a,2);

                var d = (a << 8) | b;
            
                return { op: template.format.split("%").join(hex(d,4)), hex: bytes, next: pc };
            case BYTE:
                var a = this.cpu.read[pc]();
                pc = (pc+1) & 0xFFFF;
                bytes += " " + hex(a,2);
            
                return { op: template.format.split("%").join(hex(a,2)), hex: bytes, next: pc };
            case SIGNED:
                var a = this.cpu.read[pc]();
                pc = (pc+1) & 0xFFFF;
                bytes += " " + hex(a,2);
            
                if(a & 0x80)
                    a |= 0xFFFFFF00;
            
                return { op: template.format.split("%").join(a), hex: bytes, next: pc };
            case RELATIVE_PC:
                var a = this.cpu.read[pc]();
                pc = (pc+1) & 0xFFFF;
                bytes += " " + hex(a,2);

                if(a & 0x80)
                    a |= 0xFFFFFF00;

                a = (pc + a) & 0xFFFF;
            
                return { op: template.format.split("%").join(hex(a,4)), hex: bytes, next: pc };
            // Implied
            default:
                return { op: template.format, hex: bytes, next: pc };
        }
    }
    
    return disassembler;
});
